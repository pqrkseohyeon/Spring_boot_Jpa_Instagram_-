package com.cos.instagram.controller;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousFileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.Future;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cos.instagram.model.Image;
import com.cos.instagram.model.Likes;
import com.cos.instagram.model.Tag;
import com.cos.instagram.model.User;
import com.cos.instagram.repository.ImageRepository;
import com.cos.instagram.repository.LikesRepository;
import com.cos.instagram.repository.TagRepository;
import com.cos.instagram.service.MyUserDetail;
import com.cos.instagram.util.Utils;
import com.fasterxml.jackson.databind.type.MapLikeType;




@Controller
public class ImageController {

	private static final Logger log = LoggerFactory.getLogger(ImageController.class);

	@Value("${file.path}")
	private String fileRealPath;

	@Autowired
	private ImageRepository mImageRepository;

	@Autowired
	private TagRepository mTagRepository;
	
	@Autowired
	private LikesRepository mLikesRepository;
	
	// (수정) 좋아요 카운트 증가
	@PostMapping("/image/like/{id}")
	public @ResponseBody String imageLike(@PathVariable int id, @AuthenticationPrincipal MyUserDetail userDetail) {
		
		Likes oldLike = mLikesRepository.findByUserIdAndImageId(userDetail.getUser().getId(), id);
		
		Optional<Image> oImage = mImageRepository.findById(id);
		Image image = oImage.get();
		
		try {
			if(oldLike == null) { // 좋아요 안한 상태 (추가)
				Likes newLike = Likes.builder()
						.image(image)
						.user(userDetail.getUser())
						.build();
						
				mLikesRepository.save(newLike);
				// 좋아요 카운트 증가(리턴 값 수정)
				return "like";
			}else { // 좋아요 한 상태 (삭제)
				mLikesRepository.delete(oldLike);
				// 좋아요 카운트 증가(리턴 값 수정)
				return "unLike";
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		return "fail";
	}


	
	// http://localhost:8989/image/feed/scroll?page=1..2..3..4
	//이미지 무한 스크롤
	@GetMapping("/image/feed/scroll")
	public @ResponseBody List<Image> imageFeedScroll(@AuthenticationPrincipal MyUserDetail userDetail,
			@PageableDefault(size = 3, sort = "id", direction = Sort.Direction.DESC) Pageable pageable) {
	
		// 내가 팔로우한 친구들의 사진
		Page<Image> pageImages = mImageRepository.findImage(userDetail.getUser().getId(), pageable);
		
		List<Image> images = pageImages.getContent();
		
		for(Image image:images) {
			Likes like = mLikesRepository.findByUserIdAndImageId(userDetail.getUser().getId(), image.getId());
			if(like != null) {
				image.setHeart(true);
			}
		}
		return images;
	}
	
	// 피드에 이미지 뿌리기
	@GetMapping({ "/", "/image/feed" })
	public String imageFeed(@AuthenticationPrincipal MyUserDetail userDetail,
			@PageableDefault(size = 3, sort = "id", direction = Sort.Direction.DESC) Pageable pageable, Model model) {
		// log.info("username : " + userDetail.getUsername());
	
		// 내가 팔로우한 친구들의 사진
		Page<Image> pageImages = mImageRepository.findImage(userDetail.getUser().getId(), pageable);
	
		List<Image> images = pageImages.getContent();
		
		for(Image image : images) {
			Likes like = mLikesRepository.findByUserIdAndImageId(userDetail.getUser().getId(), image.getId());
			if(like != null) {
				image.setHeart(true);
			}

		}
		
		// 4번 likeCount
		for (Image item:images) {
			int likeCount = mLikesRepository.countByImageId(item.getId());
			item.setLikeCount(likeCount);
			
		}
		
		model.addAttribute("images", images);
		

		return "image/feed";
	}

	//이미지 업로드 폼으로
	@GetMapping("/image/upload")
	public String imageUpload() {
		return "image/image_upload";
	}

	// 파일 업로드 nio : New Input/output (양방향, 기본 io는 단방향) 
	@PostMapping("/image/uploadProc")
	public String imageUploadProc(@AuthenticationPrincipal MyUserDetail userDetail,
			@RequestParam("file") MultipartFile file, @RequestParam("caption") String caption,
			@RequestParam("location") String location, @RequestParam("tags") String tags) throws IOException{

		/* UUID는 범용 고유 식별자로써, 고유한 값을 생성해준다.
		 * 완벽한 고유값이라는 보장은 없지만 실제 사용시에 중복될 가능성이 거의 없어서 
		 * 테이블의 key 값이나 파일 업로드시 임시 파일명 등으로 쓰일 수 있다.
		 * 1. 업로드된 파일명의 중복을 방지하기 위해 파일명을 변경할 때 사용
		 * 2. 일련번호 대신 유추하기 힘든 식별자를 사용하여 다른 컨텐츠의 임의 접근을 방지하는데 사용.*/
		//이미지 업로드 수행
		UUID uuid = UUID.randomUUID();
		String uuidFilename = uuid + "_" + file.getOriginalFilename();
		Path filePath = Paths.get(fileRealPath + uuidFilename);
		Files.write(filePath, file.getBytes());

		User principal = userDetail.getUser();

		Image image = new Image();
		image.setCaption(caption);
		image.setLocation(location);
		image.setUser(principal);
		image.setPostImage(uuidFilename);

		// <img src="/upload/파일명"	 />
		mImageRepository.save(image);

		// Tag 객체 생성 집어 넣겠음.
		List<String> tagList = Utils.tagParser(tags);

		for (String tag : tagList) {
			Tag t = new Tag();
			t.setName(tag);
			t.setImage(image);
			mTagRepository.save(t);
			image.getTags().add(t);
		}

		return "redirect:/";
	}

}
